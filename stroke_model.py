# -*- coding: utf-8 -*-
#"""Stroke_Model.ipynb
#
#Automatically generated by Colaboratory.

#Original file is located at
#    https://colab.research.google.com/drive/12tY5paiJqAqkc7cYKTY9GrO7iwIsJpam
#"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import scipy
import math
import matplotlib.ticker as mtick
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from imblearn import under_sampling, over_sampling
from imblearn.over_sampling import SMOTE
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import confusion_matrix ,f1_score
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import AdaBoostClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import VotingClassifier
import plotly.express as px

# %matplotlib inline

strokes = pd.read_csv('Data/healthcare-dataset-stroke-data.csv')
df = strokes.copy()


#Targeted to predict a personâ€™s probability of getting = p
# max(p) = predicted_probability of changing the company.

#In this analysis, since we are taking the data as a whole, candidate_id is not required.

df.drop('id', axis = 1, inplace = True)

dict1 = {'Male' : 0, 'Female' : 1, 'Other' : 2}
df['gender'] = [dict1[item] for item in df['gender']]

dict2 = {'Yes' : 1, 'No' : 0}
df['ever_married'] = [dict2[item] for item in df['ever_married']]

dict3 = {'Private' : 1, 'Self-employed': 2, 'Govt_job': 3, 'children':4, 'Never_worked':0}
df['work_type'] = [dict3[item] for item in df['work_type']]

dict4 = {'Urban' : 1, 'Rural' : 0}
df['Residence_type'] = [dict4[item] for item in df['Residence_type']]

dict5 = {'formerly smoked':1, 'never smoked':2, 'smokes':3, 'Unknown':0}
df['smoking_status'] = [dict5[item] for item in df['smoking_status']]

#For data features, with normal/gaussian seeming distribution, we will fill the missing values with random numbers in the range between (mean - 25%, mean + 25%) (approximately).
#For data features, with modal frequency greater than 50%, we will fill the missing values with modal value.

import random
df.bmi.fillna(np.random.uniform(25,29),inplace=True)

#"""Since, we can easily see there's a class imbalance and that may lead to very poor results. We will use SMOTE, **Synthetic Minority Oversampling Technique(SMOTE)** is an oversampling technique and widely used to handle the imbalanced dataset. Through this, we will synthesize new data points for minority class and oversample that class."""

x = df.iloc[:, 0:10]
y = df.iloc[:, -1]

X,Y=SMOTE().fit_resample(x,y)

#Random Forest Classifier
random_forest=RandomForestClassifier(n_estimators=500)
random_forest.fit(X, Y)

# Saving the model
import pickle
pickle.dump(random_forest, open('strokes_clf.pkl', 'wb'))
print("Pickle file generated!")
